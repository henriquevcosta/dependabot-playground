name: "SBOM upload"

on:
  push:
    branches: [ main ]
  pull_request:
  # can add push and pull_request here 

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

              # Gradle build

      - name: Install Java
        uses: actions/setup-java@v2
        with:
          java-version: "19"
          distribution: "temurin"
          cache: "gradle"

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v1
        
              # Generate CycloneDX

      # - name: Run gradlew cyclonedxBom task
      #   uses: gradle/gradle-build-action@v2
      #   with:
      #     build-root-directory: .
      #     arguments: cyclonedxBom

      # - name: Upload application
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: cyclonesbom
      #     path: ./bom.json
      #     retention-days: 3
  
        # Generate gradle lockfile for syft to parse

      - name: Run gradlew task to generate the lockfile
        uses: gradle/gradle-build-action@v2
        with:
          build-root-directory: .
          arguments: dependencies --write-locks

      #     # See https://github.com/marketplace/actions/anchore-sbom-action
      # - name: Run syft to generate the SBOM
      #   uses: anchore/sbom-action@v0
      #   with:
      #     path: .
      #     output-file: "./sbom-build.spdx.json"
      #     upload-artifact: true
      #     upload-artifact-retention: 30
         
      # Use Trivy to generate the SBOM (syft's package names weren't correct)
      # NOTE: this is using trivy ONLY for the SBOM, we could do the whole thing and generate a SARIF file and upload that
      #  https://github.com/aquasecurity/trivy-action
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          format: 'github'
          output: 'dependency-results.sbom.json'
          image-ref: '.'
          github-pat: ${{ secrets.GITHUB_TOKEN }}

      - name: Run Trivy vulnerability scanner in fs mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          ignore-unfixed: true
          output: 'trivy-results-fs.sarif'
          severity: 'CRITICAL,HIGH'
 
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results-fs.sarif'

